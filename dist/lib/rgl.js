/// <reference path="./RGLM.ts">
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rglm = exports.rgl = void 0;
const tslib_1 = require("tslib");
const assert = tslib_1.__importStar(require("assert"));
const event = tslib_1.__importStar(require("events"));
const readline = tslib_1.__importStar(require("readline"));
const fs = tslib_1.__importStar(require("fs-extra"));
const os = tslib_1.__importStar(require("os"));
const path = tslib_1.__importStar(require("path"));
const rglm = tslib_1.__importStar(require("./RGLM"));
exports.rglm = rglm;
const util = tslib_1.__importStar(require("util"));
var rgl;
(function (rgl) {
    const dbg = util.debuglog("RGL");
    dbg(`ins ${__dirname}`);
    rgl.scrollUp = (by = 1) => `\x1b[${by}S`, rgl.scrollDown = (by = 1) => `\x1b[${by}T`, rgl.save = `\x1b7\x1b[s`, rgl.restore = `\x1b8\x1b[u`;
    /**
     * Main packaging Class
     */
    class RGL extends event.EventEmitter {
        cfg;
        /**
         * TTY streams bound to app
         */
        _bound = {
            sin: process.stdin,
            sout: process.stdout,
            serr: process.stderr,
            sinbind: null,
        };
        /**
         * SOUT cursor state
         */
        cursor = [0, 0];
        /**
         * Source of package Config in case of fs load
         */
        #_loadedFrom = "";
        static defaults = {
            description: "",
            main: "./main.js",
            version: "0.1",
            mappings: "./mappings.js",
            name: process.title,
            keywords: [],
            "$schema": path.join(__dirname, "../../rglcfg.schema.json")
        };
        /**
         * Special keys for convenience
         */
        static special_keys = {
            ctrlC: Buffer.from("03", "hex"),
            ctrlV: Buffer.from("16", "hex"),
            up: Buffer.from("1b5b41", "hex"),
            down: Buffer.from("1b5b42", "hex"),
            right: Buffer.from("1b5b43", "hex"),
            left: Buffer.from("1b5b44", "hex"),
            enter: Buffer.from("0d", "hex"),
            back: Buffer.from("08", "hex"),
            del: Buffer.from("1b5b337e", "hex"),
            shiftUp: Buffer.from("1b5b313b3241", "hex"),
            shiftDown: Buffer.from("1b5b313b3242", "hex"),
            shiftRight: Buffer.from("1b5b313b3243", "hex"),
            shiftLeft: Buffer.from("1b5b313b3244", "hex"),
            /**
             * @todo add ctrl/shift arrows(?)
            */
        };
        constructor(cfg) {
            super();
            this.cfg = cfg;
            this.cfg = Object.assign(Object.assign(Object.create(null), RGL.defaults), cfg);
            assert.ok(this.cfg.name, "RGL 'name' must be provided in the config");
            this.cfg.main = "./" + path.win32.normalize(this.cfg.main ?? "./main.js");
            this.cfg.mappings = "./" + path.win32.normalize(this.cfg.mappings ?? "./mappings.js");
            //process.stdout.write(`\x1b]0;${this.cfg.name}\a`);
            process.title = this.cfg.name ?? process.title ?? "RGL";
            this.parseMappings();
        } //ctor
        get dimens() {
            return this.sout?.getWindowSize() ?? [0, 0];
        } //g-dimens
        get cDpt() {
            return this.colorDepth();
        } //g-cDpt
        get serr() {
            return this._bound.serr ?? this._bound.sout ?? process.stderr;
        } //g-serr
        get sout() {
            return this._bound.sout ?? process.stdout;
        } //g-sout
        get sin() {
            return this._bound.sin ?? process.stdin;
        } //g-sin
        /**
         * Parse Mappings from File
         */
        parseMappings(from = this.cfg.mappings) {
            assert.ok(from, "'mappings' must be a valid path");
            from = path.win32.join(process.cwd(), from);
            delete require.cache[from];
            try {
                return rglm.RGLM.RGLMChunk.mappings = require(from);
            }
            catch (e) {
                return rglm.RGLM.RGLMChunk.mappings = require(path.join(__dirname, "../../mappings.js"));
            }
        } //parseMappings
        /**
         * Capture keys from SIN
         */
        capture(which = this.sin, bind = true, out = this.sout, err = this.serr) {
            assert.ok(which.isTTY && out.isTTY && err.isTTY, "Stream must be TTY");
            if ((which.isRaw && !bind) || (!which.isRaw && bind))
                which.setRawMode(bind);
            if (this._bound.sinbind && this._bound.sin) {
                this._bound.sin.removeListener("data", this._bound.sinbind);
                this._bound.sinbind = null;
            }
            if (which.isRaw) {
                which.on("data", this._bound.sinbind = (key) => {
                    this.emit("rawkey", key, key.length > 1 && key[0] == 0x1b, key.length > 1 ? key.slice(1) : key.slice(0));
                    this.emit("rawctrlkey", key, Buffer.from([(Array.from(key.values()).pop() ?? 0) + 0x61 - 1]), key.length > 1 && key[0] == 0x1b, key.length > 1 ? key.slice(1) : key.slice(0));
                    this.emit("key", key.toString("utf8"), key.length > 1 && key[0] == 0x1b, (key.length > 1 ? key.slice(1) : key.slice(0)).toString("utf8"));
                });
            }
            this._bound.sin = which;
            this._bound.sout = out;
            this._bound.serr = err;
            this.emit("debug", `TTY set to ${bind}`);
            return which.isRaw;
        } //capture
        /**
         * Load package Config from File
         */
        static async load(from = "./package.json") {
            if (typeof from == "string") {
                from = path.win32.resolve(from);
                let out = new RGL(await fs.readJSON(from, {
                    encoding: "ascii",
                    flag: "r"
                }));
                out.#_loadedFrom = from;
                return out;
            }
            else
                return new RGL(from);
        } //load
        /**
         * Store package Config to File
         */
        async store(to = this.#_loadedFrom ?? "./package.json", repl, pad = 2) {
            assert.ok(to && typeof to == "string", "'config' must be a valid path");
            return await fs.writeJSON(to, this.cfg, {
                EOL: os.EOL,
                encoding: "ascii",
                mode: 0o775,
                spaces: pad,
                replacer: repl,
                flag: "w"
            });
        } //store
        /**
         * Launch package entry
         */
        exec(from = this.cfg.main ?? "./main.js") {
            assert.ok(from, "'main' must be a valid path");
            from = path.win32.join(process.cwd(), from);
            delete require.cache[from];
            try {
                return require(from)(this, module);
            }
            catch (e) {
                return require(path.win32.join(process.cwd(), "./main.js"))(this, module);
            }
        } //exec
        /**
         * Write-and-count to SOUT
         */
        write(d, ...data) {
            if (d instanceof Buffer)
                d = d.toString("ascii");
            else if (d instanceof Uint8Array)
                d = d.join('');
            d = d.replaceAll('\t', ' '.repeat(4)).replaceAll(/((?<!\r)\n(?!\r)|(?<!\n)\r(?!\n)|\r\n|\n\r)/gmis, '\n');
            const chs = d.toString().split('\n'), len = chs.length - 1;
            if (len >= 1)
                this.cursor[0] = chs[len].length;
            else
                this.cursor[0] += chs[len].length;
            this.cursor[0] %= this.sout.columns;
            this.cursor[1] = Math.min(this.cursor[1] + len, this.sout.rows);
            const out = this.sout.write(d);
            this.emit("write", d);
            if (!out)
                process.nextTick(() => this.sout.uncork());
            data.forEach(dt => this.write(dt));
            return out;
        } //write
        /**
         * Write-and-count-newline to SOUT
         */
        writeE(...data) {
            return this.write(data.shift(), ...data, os.EOL);
        } //writeE
        /**
         * Get TTY color depth
         */
        colorDepth(env = process.env) {
            return this.sout.getColorDepth(env);
        } //colorDepth
        /**
         * Move-and-count SOUT cursor
         */
        async move(x, y, rel = false) {
            if (!rel)
                x = Math.min(Math.max(x, 0), this.dimens[0]);
            else
                x = Math.min(Math.max(x, -this.dimens[0]), this.dimens[0]);
            if (!rel && y)
                y = Math.min(Math.max(y, 0), this.dimens[1]);
            else if (rel && y)
                y = Math.min(Math.max(y, -this.dimens[1]), this.dimens[1]);
            return new Promise((res, rej) => {
                let data;
                this.emit("move", x, y, rel);
                if (!rel) {
                    this.cursor[0] = x;
                    this.cursor[1] = y ?? this.cursor[1];
                    data = readline.cursorTo(this.sout, x, y, () => res(data));
                }
                else {
                    if (x)
                        this.cursor[0] += x;
                    if (y)
                        this.cursor[1] += y;
                    data = readline.moveCursor(this.sout, x, y ?? 0, () => res(data));
                }
            });
        } //move
        /**
         * Clear-and-restore SOUT
         */
        async clear(lines, dir = 0, rel) {
            return new Promise(async (res, rej) => {
                const sav = [...this.cursor];
                let out = true;
                if (!lines) {
                    this.move(0, 0, rel).then(() => {
                        out = readline.clearScreenDown(this.sout, () => {
                            this.move(...sav, false).then(() => res(out));
                        });
                    });
                }
                else if (typeof lines == "number" && lines < 0)
                    out = readline.clearLine(this.sout, dir, () => {
                        this.move(...sav, false).then(() => res(out));
                    });
                else if (typeof lines == "number") {
                    this.move(0, lines, rel).then(() => {
                        out = readline.clearLine(this.sout, dir, () => {
                            this.move(...sav, false).then(() => res(out));
                        });
                    });
                }
                else
                    return Promise.all(lines.map(l => this.clear(l, dir, rel))).then(bs => res(bs.every(b => b)), rej);
                this.emit("clear", lines, dir, rel, out);
            });
        } //clear
        once(eventname, listener) {
            return super.on(eventname, listener);
        } //once
        on(eventname, listener) {
            return super.on(eventname, listener);
        } //on
        emit(eventname, ...args) {
            return super.emit(eventname, ...args);
        } //emit
    } //RGL
    rgl.RGL = RGL;
})(rgl = exports.rgl || (exports.rgl = {})); //rgl
exports.default = rgl;
//# sourceMappingURL=data:application/json;base64,