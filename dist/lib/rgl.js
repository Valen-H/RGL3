/// <reference path="./RGLM.ts">
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rglm = exports.rgl = void 0;
const tslib_1 = require("tslib");
const assert = tslib_1.__importStar(require("assert"));
const event = tslib_1.__importStar(require("events"));
const readline = tslib_1.__importStar(require("readline"));
const fs = tslib_1.__importStar(require("fs-extra"));
const os = tslib_1.__importStar(require("os"));
const path = tslib_1.__importStar(require("path"));
const rglm = tslib_1.__importStar(require("./RGLM"));
exports.rglm = rglm;
var rgl;
(function (rgl) {
    rgl.scrollUp = (by = 1) => `\x1b[${by}S`, rgl.scrollDown = (by = 1) => `\x1b[${by}T`, rgl.save = `\x1b7\x1b[s`, rgl.restore = `\x1b8\x1b[u`;
    class RGL extends event.EventEmitter {
        cfg;
        _bound = {
            sin: process.stdin,
            sout: process.stdout,
            serr: process.stderr,
            sinbind: null,
        };
        cursor = [0, 0];
        #_loadedFrom = "";
        static defaults = {
            description: "",
            entry: "./main.js",
            version: "0.1",
            mappings: "./mappings.js",
            name: process.title,
            "$schema": path.join(__dirname, "rglcfg.schema.json")
        };
        static special_keys = {
            ctrlC: Buffer.from("03", "hex"),
            ctrlV: Buffer.from("16", "hex"),
            up: Buffer.from("1b5b41", "hex"),
            down: Buffer.from("1b5b42", "hex"),
            right: Buffer.from("1b5b43", "hex"),
            left: Buffer.from("1b5b44", "hex"),
            enter: Buffer.from("0d", "hex"), //0a
        };
        constructor(cfg) {
            super();
            this.cfg = cfg;
            this.cfg = Object.assign(Object.assign(Object.create(null), RGL.defaults), cfg);
            assert.ok(this.cfg.name, "RGL 'name' must be provided in the config");
            this.cfg.entry = path.win32.resolve(this.cfg.entry ?? "./main.js");
            this.cfg.mappings = path.win32.resolve(this.cfg.mappings ?? "./mappings.js");
            //process.stdout.write(`\x1b]0;${this.cfg.name}\a`);
            process.title = this.cfg.name ?? process.title ?? "RGL";
            this.parseMappings();
        } //ctor
        get dimens() {
            return this.sout?.getWindowSize() ?? [0, 0];
        } //g-dimens
        get cDpt() {
            return this.colorDepth();
        } //g-cDpt
        get serr() {
            return this._bound.serr ?? this._bound.sout ?? process.stderr;
        } //g-serr
        get sout() {
            return this._bound.sout ?? process.stdout;
        } //g-sout
        get sin() {
            return this._bound.sin ?? process.stdin;
        } //g-sin
        parseMappings(from = this.cfg.mappings) {
            assert.ok(from, "'mappings' must be a valid path");
            delete require.cache[from];
            return rglm.RGLM.RGLMChunk.mappings = require(from);
        } //parseMappings
        capture(which = this.sin, bind = true, out = this.sout, err = this.serr) {
            assert.ok(which.isTTY && out.isTTY && err.isTTY, "Stream must be TTY");
            if ((which.isRaw && !bind) || (!which.isRaw && bind))
                which.setRawMode(bind);
            if (this._bound.sinbind && this._bound.sin) {
                this._bound.sin.removeListener("data", this._bound.sinbind);
                this._bound.sinbind = null;
            }
            if (which.isRaw) {
                which.on("data", this._bound.sinbind = (key) => {
                    this.emit("rawkey", key, key[0] == 0x1b, key.length > 1 ? key.slice(1) : key.slice(0));
                    this.emit("rawctrlkey", key, Buffer.from([(Array.from(key.values()).pop() ?? 0) + 0x61 - 1]), key.length > 1 && key[0] == 0x1b, key.length > 1 ? key.slice(1) : key.slice(0));
                    this.emit("key", key.toString("utf8"), key[0] == 0x1b, (key.length > 1 ? key.slice(1) : key.slice(0)).toString("utf8"));
                });
            }
            this._bound.sin = which;
            this._bound.sout = out;
            this._bound.serr = err;
            this.emit("debug", `TTY set to ${bind}`);
            return which.isRaw;
        } //capture
        static async load(from = "rglcfg.json") {
            if (typeof from == "string") {
                from = path.win32.resolve(from);
                let out = new RGL(JSON.parse((await fs.promises.readFile(from, {
                    encoding: "ascii",
                    flag: "r"
                }))));
                out.#_loadedFrom = from;
                return out;
            }
            else
                return new RGL(from);
        } //load
        async store(to = this.#_loadedFrom, repl, pad = 2) {
            assert.ok(to && typeof to == "string", "'config' must be a valid path");
            return await fs.writeJSON(to, this.cfg, {
                EOL: os.EOL,
                encoding: "ascii",
                mode: 0o775,
                spaces: pad,
                replacer: repl,
                flag: "w"
            });
        } //store
        exec(from = this.cfg.entry) {
            assert.ok(from, "'entry' must be a valid path");
            delete require.cache[from];
            require(from)(this, module);
        } //exec
        write(d, ...data) {
            if (d instanceof Uint8Array)
                d = d.join('');
            d = d.replaceAll('\t', ' '.repeat(4)).replaceAll(/((?<!\r)\n(?!\r)|(?<!\n)\r(?!\n)|\r\n|\n\r)/gmis, '\n');
            const chs = d.toString().split('\n');
            this.cursor[1] += chs.length - 1;
            this.cursor[0] = chs[chs.length - 1].length - 1;
            const out = this.sout.write(d);
            this.emit("write", d);
            if (!out)
                process.nextTick(() => this.sout.uncork());
            data.forEach(dt => this.write(dt));
            return out;
        } //write
        writeE(...data) {
            return this.write(data.shift(), ...data, os.EOL);
        } //writeE
        colorDepth(env = process.env) {
            return this.sout.getColorDepth(env);
        } //colorDepth
        async move(x, y, rel = false) {
            x = Math.max(x, 0) % this.dimens[0];
            if (y)
                y = Math.max(y, 0) % this.dimens[1];
            return new Promise((res, rej) => {
                let data;
                this.emit("move", x, y, rel);
                if (!rel) {
                    data = readline.cursorTo(this.sout, x, y, () => res(data));
                    this.cursor[0] = x;
                    this.cursor[1] = y ?? this.cursor[1];
                }
                else {
                    data = readline.moveCursor(this.sout, x, y ?? 0, () => res(data));
                    if (x)
                        this.cursor[0] += x;
                    if (y)
                        this.cursor[1] += y;
                }
            });
        } //move
        async clear(lines, dir = 0, rel) {
            return new Promise(async (res, rej) => {
                let out = true;
                if (!lines) {
                    this.move(0, 0, rel).then(() => {
                        out = readline.clearScreenDown(this.sout);
                        this.move(...this.cursor, false).then(() => res(out));
                    });
                }
                else if (typeof lines == "number" && lines < 0)
                    out = readline.clearLine(this.sout, dir, () => res(out));
                else if (typeof lines == "number") {
                    this.move(0, lines, rel).then(() => {
                        out = readline.clearLine(this.sout, dir);
                        this.move(...this.cursor, false).then(() => res(out));
                    });
                }
                else
                    return Promise.all(lines.map(l => this.clear(l, dir, rel))).then(bs => res(bs.every(b => b)), rej);
                this.emit("clear", lines, dir, rel, out);
            });
        } //clear
        emit(eventname, ...args) {
            return super.emit(eventname, ...args);
        } //emit
    } //RGL
    rgl.RGL = RGL;
})(rgl = exports.rgl || (exports.rgl = {})); //rgl
exports.default = rgl;
//# sourceMappingURL=data:application/json;base64,