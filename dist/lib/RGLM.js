/// <reference path="./rgl">
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RGLM = exports.csimerger = exports.CSI = void 0;
const tslib_1 = require("tslib");
const assert = tslib_1.__importStar(require("assert"));
const fs = tslib_1.__importStar(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const rgl = tslib_1.__importStar(require("./rgl"));
const events = tslib_1.__importStar(require("events"));
exports.CSI = "\x1b[";
/**
 * Merge polluted ANSI
 */
function csimerger(str) {
    let idx = 0, //runner
    csi = 0, //csidx valid at 2
    csidx = [-1, -1]; //first csi
    function proc(str, i1, i2) {
        let s = str.slice(i1, i2);
        if (!s.endsWith('m')) {
            s += 'm';
            i2++;
        }
        s = s.replaceAll(/m\x1b\[/g, ';');
        return [str.slice(0, i1) + s + str.slice(i2), i1 + s.length];
    } //proc
    if (!str)
        return str;
    let cln = str;
    do {
        const c = cln[idx] || '';
        if (!csi && c == '\x1b') {
            csi = 1;
            csidx[0] = idx;
        }
        else if (csi == 1 && c == '[')
            csi = 2;
        else if (csi == 1)
            csi = 0;
        else if (csi == 2 && c == 'm')
            csi = 3;
        else if (csi == 3 && c == '\x1b')
            csi = 4;
        else if (csi == 4 && c == '[')
            csi = 2;
        else if (csi > 1 && !/^([\d;]+)$/.test(c)) {
            csidx[1] = idx - 1;
            if (csi != 2) {
                const [ncln, l] = proc(cln, ...csidx);
                if (cln != ncln)
                    idx = l;
                cln = ncln;
            }
            csi = 0;
            csidx = [-1, -1];
        }
        idx++;
    } while (idx <= cln.length);
    return cln;
} //csimerger
exports.csimerger = csimerger;
var RGLM;
(function (RGLM) {
    function stubmap(text, ...data) {
        return text.split('').map((c) => new RGLMChunk(c, data.shift() ?? 0xff, data.shift() ?? 0xff, data.shift() ?? 0xff, data.shift() ?? 0xff));
    } //stubmap
    RGLM.stubmap = stubmap;
    /**
     * Make a Map out of pure text, for alerts/textboxes
     */
    function boxed(text, par, cx, cy) {
        let ret = RGLMap.blank(par);
        const arr = ret.raw.replaceAll(rgl.eolconv, '\n').split('\n');
        ret.place(stubmap(text));
        ret.dimens[0] = arr.sort((a, b) => a.length - b.length).pop()?.length ?? 0;
        ret.dimens[1] = arr.length;
        ret.clip[0] = cx ?? ret.dimens[0];
        ret.clip[1] = cy ?? ret.dimens[1];
        return ret;
    } //boxed
    RGLM.boxed = boxed;
    /**
     * RGLM Magic
     */
    RGLM.MAGIC = Buffer.from("RGL\0", "ascii");
    class RGLMChunk extends events.EventEmitter {
        chr;
        fg;
        bg;
        st;
        cust;
        static #idcntr = 0;
        /**
         * Formatting mappings, set by parent module
         */
        static mappings = {
            fg: [],
            bg: [],
            st: [],
            cust: [],
        };
        /**
         * Chunk unique id
         */
        _id = RGLMChunk.#idcntr++;
        onrender = (idx, c, par) => this.print;
        constructor(chr, fg, bg, st, cust) {
            assert.ok(typeof chr == "string", "Bad Chunk");
            super();
            this.chr = chr;
            this.fg = fg;
            this.bg = bg;
            this.st = st;
            this.cust = cust;
            this.chr = chr.replaceAll('\x00', '');
            assert.ok(this.chr.length <= 1 &&
                Buffer.from(this.chr, "ascii").length <= 4 &&
                fg >= 0 && fg <= 0xff &&
                bg >= 0 && bg <= 0xff &&
                st >= 0 && st <= 0xff &&
                cust >= 0 && cust <= 0xff, "Bad Chunk");
        } //ctor
        /**
         * Repack into Buf8
         */
        get pack() {
            const chr = Buffer.alloc(4);
            chr.write(this.chr);
            return Buffer.concat([chr, Buffer.from([this.fg, this.bg, this.st, this.cust])], 8);
        } //g-pack
        /**
         * Craft invalid/blank ender Chunk
         */
        static blank() {
            return new RGLMChunk('', 0xff, 0xff, 0xff, 0xff);
        } //blank
        /**
         * Buf8 -> Chunk
         */
        static parse(buf) {
            return new RGLMChunk(buf.slice(0, 4).toString(), buf[4], buf[5], buf[6], buf[7]);
        } //parse
        /**
         * Chunk string representation
         */
        get print() {
            const fg = RGLMChunk.mappings.fg[this.cust == 0xff ? 0xff : this.fg] ?? ((s) => s), bg = RGLMChunk.mappings.bg[this.cust == 0xff ? 0xff : this.bg] ?? ((s) => s), st = RGLMChunk.mappings.st[this.cust == 0xff ? 0xff : this.st] ?? ((s) => s), cust = RGLMChunk.mappings.cust[this.cust] ?? ((s) => s);
            return csimerger(cust(st(fg(bg(this.chr ?? ' ', this.bg, this), this.fg, this), this.st, this), this.cust, this));
        } //g-print
    } //RGLMChunk
    RGLM.RGLMChunk = RGLMChunk;
    class RGLMap extends events.EventEmitter {
        dimens;
        parent;
        scroll;
        clip;
        static RGLMChunk = RGLMChunk;
        /**
         * Map Chunks
         */
        chunks = [];
        _loadedFrom = "";
        meta = {};
        constructor(dimens = [0, 0], parent, scroll = [0, 0], clip = [dimens[0], dimens[1], 0, 0]) {
            assert.ok(dimens instanceof Array && dimens.length == 2 && dimens.every(d => d >= 0) &&
                scroll instanceof Array && scroll.length == 2 && parent, "Bad Map");
            super();
            this.dimens = dimens;
            this.parent = parent;
            this.scroll = scroll;
            this.clip = clip;
            this.dimens = dimens.map(d => Number(d));
            this.scroll = scroll.map(d => Number(d));
        } //ctor
        /**
         * Create empty/blank Map
         */
        static blank(par) {
            return new RGLM.RGLMap([0, 0], par, [0, 0], [0, 0, 0, 0]);
        } //blank
        /**
         * Craft Map from fs
         */
        static async parse(from, par) {
            assert.ok(from, "'from' must be provided");
            from = path.resolve(from);
            const dat = await fs.promises.readFile(from, {
                flag: "r"
            }), end = Buffer.from("FFFFFFFFFFFFFFFF", "hex");
            assert.ok(dat.length >= 8 && !dat.slice(0, 4).compare(Buffer.from("RGL\0", "ascii")), "Broken RGLM");
            let map = new RGLMap([dat.slice(4, 6).readUInt16LE(), dat.slice(6, 8).readUInt16LE()], par), chk = null, i = 8, passing = true;
            map._loadedFrom = from;
            if (dat.length > 8) {
                do {
                    if (i + 8 > dat.length)
                        throw "Broken RGLM";
                    chk = dat.slice(i, i += 8);
                    if (chk.compare(end)) {
                        map.chunks.push(RGLMap.RGLMChunk.parse(chk));
                        if (i == dat.length)
                            break;
                    }
                    else
                        passing = false;
                } while (passing);
            }
            if (chk && !chk.compare(end)) {
                const meta = dat.slice(i).toString("utf8").split('&');
                for (const met of meta) {
                    const pair = met.split('=');
                    map.meta[pair[0]] = pair[1] ?? '';
                }
            }
            return map;
        } //parse
        /**
         * (Re)store Map to fs
         */
        async store(to = this._loadedFrom) {
            assert.ok(to && typeof to == "string", "'destination' must be a valid path");
            return await fs.promises.writeFile(to, this.pack, {
                encoding: "binary",
                flag: "w",
                mode: 0o775
            });
        } //store
        /**
         * Map -> Buff
         */
        get pack() {
            const dimens = [
                Buffer.allocUnsafe(2),
                Buffer.allocUnsafe(2),
            ];
            let meta = Buffer.from(Object.entries(this.meta).map(e => e.join('=')).join('&'), "utf8");
            dimens[0].writeUInt16LE(this.dimens[0]);
            dimens[1].writeUInt16LE(this.dimens[1]);
            if (meta.length)
                meta = Buffer.concat([Buffer.from("FFFFFFFFFFFFFFFF", "hex"), meta]);
            return Buffer.concat([RGLM.MAGIC, ...dimens, ...this.chunks.map(c => c.pack), meta], (this.chunks.length + 1) * 8 + meta.length);
        } //g-pack
        /**
         * String representation of Map's Chunks
         */
        get print() {
            return this.chunks.map(c => c.print).join('');
        } //g-print
        /**
         * Get raw chunks
         */
        get raw() {
            return this.chunks.map((c) => c.chr).join('');
        } //g-raw
        scrollTo(sx = this.scroll[0], sy = this.scroll[1]) {
            this.scroll[0] = sx;
            this.scroll[1] = sy;
            return this;
        } //scrollTo
        scrollBy(dsx = 0, dsy = 0) {
            return this.scrollTo(this.scroll[0] + dsx, this.scroll[1] + dsy);
        } //scrollBy
        resizeTo(dx = this.dimens[0], dy = this.dimens[1]) {
            this.dimens[0] = Math.min(dx, 0);
            this.dimens[1] = Math.min(dy, 0);
            return this;
        } //resizeTo
        resizeBy(ddx = 0, ddy = 0) {
            return this.resizeTo(this.dimens[0] + ddx, this.dimens[1] + ddy);
        } //resizeBy
        clipTo(cx = this.clip[0], cy = this.clip[1], crx = this.clip[2], cry = this.clip[3]) {
            this.clip[2] = Math.max(crx, cx, 0);
            this.clip[3] = Math.max(cry, cy, 0);
            this.clip[0] = Math.max(cx, this.clip[2]);
            this.clip[1] = Math.max(cy, this.clip[3]);
            return this;
        } //clipTo
        clipBy(dcx = 0, dcy = 0, dcrx = 0, dcry = 0) {
            return this.clipTo(this.clip[0] + dcx, this.clip[1] + dcy, this.clip[2] + dcrx, this.clip[3] + dcry);
        } //clipBy
        /**
         * Calculate Viewport coordinates from chunklist index
         */
        calcChkIdx(x, y = 0) {
            if (x instanceof RGLMChunk)
                return this.chunks.findIndex(c => c == x);
            assert.ok(x >= 0, "Bad idx");
            return this.dimens[0] * y + x;
        } //calcChkIdx
        /**
         * Calculate chunklist index from Viewport coordinates
         */
        calcChkCrd(idx) {
            if (idx instanceof RGLMChunk)
                idx = this.chunks.findIndex(c => c == idx);
            assert.ok(idx >= 0, "Bad idx");
            return [
                idx % this.dimens[0],
                Math.floor(idx / this.dimens[0])
            ];
        } //calcChkCrd
        /**
         * Get a Chunk
         */
        get(n, x) {
            if (n instanceof RGLMChunk)
                return this.chunks[this.calcChkIdx(n)];
            else if (typeof x == "undefined")
                return this.chunks[n];
            else
                return this.chunks[this.calcChkIdx(n, x)];
        } //get
        /**
         * Place a Chunk
         */
        place(c, n = this.chunks.length, x, repl = 1) {
            const idx = typeof x == "undefined" ? (n instanceof RGLMChunk ? this.calcChkIdx(n) : n) : this.calcChkIdx(n, x);
            assert.ok(idx >= 0, "Bad idx");
            return this.chunks.splice(idx, repl, ...c);
        } //place
        /**
         * Swap Chunks locations
         */
        swap(c1, c2) {
            if (c1 == c2)
                return this;
            const ci1 = this.calcChkIdx(c1);
            assert.ok(ci1 >= 0, "Bad idx");
            const cc1 = this.chunks.splice(ci1, 1)[0];
            const ci2 = this.calcChkIdx(c2);
            assert.ok(ci2 >= 0, "Bad idx");
            const cc2 = this.chunks.splice(ci2, 1, cc1)[0];
            this.chunks.splice(ci1, 0, cc2);
            return this;
        } //swap
        /**
         * Check if Chunk is inside bounds
         *
         * t* - chunk target
         * d* - viewport size
         * s* - viewport scroll
         * * - viewport
         */
        isIn(tx, ty, x = this.clip[2], y = this.clip[3], sx = this.scroll[0], sy = this.scroll[1], dx = this.dimens[0], dy = this.dimens[1], cx = this.clip[0], cy = this.clip[1], crx = this.clip[2], cry = this.clip[3]) {
            if (typeof ty == "undefined")
                ([tx, ty] = this.calcChkCrd(tx));
            const rx = tx + sx, ry = ty + sy;
            return rx >= Math.max(x, crx) && rx < Math.min(cx, dx, this.parent.sout.columns) && ry >= Math.max(y, cry) && ry < Math.min(cy, dy, this.parent.sout.rows);
        } //isIn
        /**
         * Imprint Map on RGL
         */
        async stamp(dx = this.dimens[0], dy = this.dimens[1], x = this.clip[2], y = this.clip[3], sx = this.scroll[0], sy = this.scroll[1], par = this.parent, cx = this.clip[0], cy = this.clip[1]) {
            assert.ok(par, "Bad parent");
            const sav = [...par.cursor];
            for (let idx = 0; idx < this.chunks.length; idx++) {
                const c = this.chunks[idx];
                if (!c)
                    continue;
                if (this.isIn(idx, undefined, x, y, sx, sy, dx, dy, cx, cy)) {
                    await par.move(...(this.calcChkCrd(idx).map((c, idx) => c + [sx, sy][idx])));
                    par.write(c.onrender(idx, c, this));
                }
            }
            await par.move(...sav);
            return this;
        } //stamp
        *[Symbol.iterator]() {
            for (const c of this.chunks)
                yield c;
        }
        get [Symbol.isConcatSpreadable]() {
            return true;
        }
        get [Symbol.toStringTag]() {
            return this.toString();
        }
        toString() {
            return this.print;
        } //toString
    } //RGLMap
    RGLM.RGLMap = RGLMap;
})(RGLM = exports.RGLM || (exports.RGLM = {})); //RGLM
exports.default = RGLM;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUkdMTS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9SR0xNLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDRCQUE0QjtBQUU1QixZQUFZLENBQUM7Ozs7QUFFYix1REFBaUM7QUFDakMscURBQStCO0FBQy9CLG1EQUE2QjtBQUM3QixtREFBNkI7QUFDN0IsdURBQWlDO0FBR3BCLFFBQUEsR0FBRyxHQUFZLE9BQU8sQ0FBQztBQUVwQzs7R0FFRztBQUNILFNBQWdCLFNBQVMsQ0FBQyxHQUFXO0lBQ3BDLElBQUksR0FBRyxHQUFXLENBQUMsRUFBRSxRQUFRO0lBQzVCLEdBQUcsR0FBVyxDQUFDLEVBQUUsa0JBQWtCO0lBQ25DLEtBQUssR0FBcUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVztJQUVoRCxTQUFTLElBQUksQ0FBQyxHQUFXLEVBQUUsRUFBVSxFQUFFLEVBQVU7UUFDaEQsSUFBSSxDQUFDLEdBQVcsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFbEMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDckIsQ0FBQyxJQUFJLEdBQUcsQ0FBQztZQUNULEVBQUUsRUFBRSxDQUFDO1NBQ0w7UUFFRCxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUQsQ0FBQyxDQUFDLE1BQU07SUFFUixJQUFJLENBQUMsR0FBRztRQUFFLE9BQU8sR0FBRyxDQUFDO0lBRXJCLElBQUksR0FBRyxHQUFHLEdB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Q0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFakMsT0FBTyxJQUFJLENBQUM7UUFDYixDQUFDLENBQUMsVUFBVTtRQUNaLFFBQVEsQ0FBQyxNQUFjLENBQUMsRUFBRSxNQUFjLENBQUM7WUFDeEMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDbEUsQ0FBQyxDQUFDLFVBQVU7UUFDWixNQUFNLENBQUMsS0FBYSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQWEsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFjLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBYyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNsSCxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUUxQyxPQUFPLElBQUksQ0FBQztRQUNiLENB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LEdBQUcsQ0FBQyxDQUFDO1lBRXZCLE9BQU8sSUFBSSxDQUFDO1FBQ2IsQ0FBQyxDQUFDLE9BQU87UUFFVCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztZQUNqQixLQUFLLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNO2dCQUMxQixNQUFNLENBQUMsQ0FBQztRQUNWLENBQUM7UUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDO1lBQzlCLE9BQU8sSUFBSSxDQUFDO1FBQ2IsQ0FBQztRQUVELElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO1lBQ3ZCLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3hCLENBQUM7UUFDRCxRQUFRO1lBQ1AsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxVQUFVO01BRVgsUUFBUTtJQTdRRyxXQUFNLFNBNlFsQixDQUFBO0FBRUYsQ0FBQyxFQTlYYSxJQUFJLEdBQUosWUFBSSxLQUFKLFlBQUksUUE4WGpCLENBQUMsTUFBTTtBQUVSLGtCQUFlLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3JnbFwiPlxyXG5cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgKiBhcyBhc3NlcnQgZnJvbSBcImFzc2VydFwiO1xyXG5pbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnMtZXh0cmFcIjtcclxuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xyXG5pbXBvcnQgKiBhcyByZ2wgZnJvbSBcIi4vcmdsXCI7XHJcbmltcG9ydCAqIGFzIGV2ZW50cyBmcm9tIFwiZXZlbnRzXCI7XHJcbmltcG9ydCAqIGFzIHN0cmlwQW5zaSBmcm9tIFwic3RyaXAtYW5zaVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IENTSTogXCJcXHgxYltcIiA9IFwiXFx4MWJbXCI7XHJcblxyXG4vKipcclxuICogTWVyZ2UgcG9sbHV0ZWQgQU5TSVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNzaW1lcmdlcihzdHI6IHN0cmluZyk6IHN0cmluZyB7XHJcblx0bGV0IGlkeDogbnVtYmVyID0gMCwgLy9ydW5uZXJcclxuXHRcdGNzaTogbnVtYmVyID0gMCwgLy9jc2lkeCB2YWxpZCBhdCAyXHJcblx0XHRjc2lkeDogW251bWJlciwgbnVtYmVyXSA9IFstMSwgLTFdOyAvL2ZpcnN0IGNzaVxyXG5cdFxyXG5cdGZ1bmN0aW9uIHByb2Moc3RyOiBzdHJpbmcsIGkxOiBudW1iZXIsIGkyOiBudW1iZXIpOiBbc3RyaW5nLCBudW1iZXJdIHtcclxuXHRcdGxldCBzOiBzdHJpbmcgPSBzdHIuc2xpY2UoaTEsIGkyKTtcclxuXHRcdFxyXG5cdFx0aWYgKCFzLmVuZHNXaXRoKCdtJykpIHtcclxuXHRcdFx0cyArPSAnbSc7XHJcblx0XHRcdGkyKys7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdHMgPSBzLnJlcGxhY2VBbGwoL21cXHgxYlxcWy9nLCAnOycpO1xyXG5cdFx0XHJcblx0XHRyZXR1cm4gW3N0ci5zbGljZSgwLCBpMSkgKyBzICsgc3RyLnNsaWNlKGkyKSwgaTEgKyBzLmxlbmd0aF07XHJcblx0fSAvL3Byb2NcclxuXHRcclxuXHRpZiAoIXN0cikgcmV0dXJuIHN0cjtcclxuXHRcclxuXHRsZXQgY2xuID0gc3RyO1xyXG5cdFxyXG5cdGRvIHtcclxuXHRcdGNvbnN0IGM6IHN0cmluZyA9IGNsbltpZHhdIHx8ICcnO1xyXG5cdFx0XHJcblx0XHRpZiAoIWNzaSAmJiBjID09ICdcXHgxYicpIHtcclxuXHRcdFx0Y3NpID0gMTtcclxuXHRcdFx0Y3NpZHhbMF0gPSBpZHg7XHJcblx0XHR9IGVsc2UgaWYgKGNzaSA9PSAxICYmIGMgPT0gJ1snKSBjc2kgPSAyO1xyXG5cdFx0ZWxzZSBpZiAoY3NpID09IDEpIGNzaSA9IDA7XHJcblx0XHRlbHNlIGlmIChjc2kgPT0gMiAmJiBjID09ICdtJykgY3NpID0gMztcclxuXHRcdGVsc2UgaWYgKGNzaSA9PSAzICYmIGMgPT0gJ1xceDFiJykgY3NpID0gNDtcclxuXHRcdGVsc2UgaWYgKGNzaSA9PSA0ICYmIGMgPT0gJ1snKSBjc2kgPSAyO1xyXG5cdFx0ZWxzZSBpZiAoY3NpID4gMSAmJiAhL14oW1xcZDtdKykkLy50ZXN0KGMpKSB7XHJcblx0XHRcdGNzaWR4WzFdID0gaWR4IC0gMTtcclxuXHRcdFx0XHJcblx0XHRcdGlmIChjc2kgIT0gMikge1xyXG5cdFx0XHRcdGNvbnN0IFtuY2xuLCBsXTogW3N0cmluZywgbnVtYmVyXSA9IHByb2MoY2xuLCAuLi5jc2lkeCk7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0aWYgKGNsbiAhPSBuY2xuKSBpZHggPSBsO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGNsbiA9IG5jbG47XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdGNzaSA9IDA7XHJcblx0XHRcdGNzaWR4ID0gWy0xLCAtMV07XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdGlkeCsrO1xyXG5cdH0gd2hpbGUoaWR4IDw9IGNsbi5sZW5ndGgpO1xyXG5cdFxyXG5cdHJldHVybiBjbG47XHJcbn0gLy9jc2ltZXJnZXJcclxuXHJcbmV4cG9ydCBtb2R1bGUgUkdMTSB7XHJcblx0XHJcblx0ZXhwb3J0IHR5cGUgQnVmOCA9IEJ1ZmZlciAmIHsgbGVuZ3RoOiA4IH07XHJcblx0ZXhwb3J0IHR5cGUgQnVmNCA9IEJ1ZmZlciAmIHsgbGVuZ3RoOiA0IH07XHJcblx0ZXhwb3J0IHR5cGUgQnVmMiA9IEJ1ZmZlciAmIHsgbGVuZ3RoOiAyIH07XHJcblx0XHJcblx0ZXhwb3J0IGZ1bmN0aW9uIHN0dWJtYXAodGV4dDogc3RyaW5nLCAuLi5kYXRhOiBudW1iZXJbXSk6IFJHTE1DaHVua1tdIHtcclxuXHRcdHJldHVybiB0ZXh0LnNwbGl0KCcnKS5tYXAoKGM6IHN0cmluZykgPT4gbmV3IFJHTE1DaHVuayhjLCBkYXRhLnNoaWZ0KCkgPz8gMHhmZiwgZGF0YS5zaGlmdCgpID8/IDB4ZmYsIGRhdGEuc2hpZnQoKSA/PyAweGZmLCBkYXRhLnNoaWZ0KCkgPz8gMHhmZikpO1xyXG5cdH0gLy9zdHVibWFwXHJcblx0LyoqXHJcblx0ICogTWFrZSBhIE1hcCBvdXQgb2YgcHVyZSB0ZXh0LCBmb3IgYWxlcnRzL3RleHRib3hlc1xyXG5cdCAqL1xyXG5cdGV4cG9ydCBmdW5jdGlvbiBib3hlZCh0ZXh0OiBzdHJpbmcsIHBhcjogUmVhZG9ubHk8cmdsLnJnbC5SR0w+LCBjeDogbnVtYmVyLCBjeTogbnVtYmVyKTogUkdMTWFwIHtcclxuXHRcdGxldCByZXQ6IFJHTE1hcCA9IFJHTE1hcC5ibGFuayhwYXIpO1xyXG5cdFx0Y29uc3QgYXJyOiBzdHJpbmdbXSA9IHJldC5yYXcucmVwbGFjZUFsbChyZ2wuZW9sY29udiwgJ1xcbicpLnNwbGl0KCdcXG4nKTtcclxuXHRcdFxyXG5cdFx0cmV0LnBsYWNlKHN0dWJtYXAodGV4dCkpO1xyXG5cdFx0cmV0LmRpbWVuc1swXVx0PSBhcnIuc29ydCgoYSwgYikgPT4gYS5sZW5ndGggLSBiLmxlbmd0aCkucG9wKCk/Lmxlbmd0aCA/PyAwO1xyXG5cdFx0cmV0LmRpbWVuc1sxXVx0PSBhcnIubGVuZ3RoO1xyXG5cdFx0cmV0LmNsaXBbMF1cdFx0PSBjeCA/PyByZXQuZGltZW5zWzBdO1xyXG5cdFx0cmV0LmNsaXBbMV1cdFx0PSBjeSA/PyByZXQuZGltZW5zWzFdO1xyXG5cdFx0XHJcblx0XHRyZXR1cm4gcmV0O1xyXG5cdH0gLy9ib3hlZFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFJHTE0gTWFnaWNcclxuXHQgKi9cclxuXHRleHBvcnQgY29uc3QgTUFHSUM6IFJlYWRvbmx5PEJ1ZjQ+ID0gQnVmZmVyLmZyb20oXCJSR0xcXDBcIiwgXCJhc2NpaVwiKSBhcyBCdWY0O1xyXG5cdFxyXG5cdGV4cG9ydCBjbGFzcyBSR0xNQ2h1bmsgZXh0ZW5kcyBldmVudHMuRXZlbnRFbWl0dGVyIHtcclxuXHRcdFxyXG5cdFx0c3RhdGljICNpZGNudHI6IG51bWJlciA9IDA7XHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogRm9ybWF0dGluZyBtYXBwaW5ncywgc2V0IGJ5IHBhcmVudCBtb2R1bGVcclxuXHRcdCAqL1xyXG5cdFx0c3RhdGljIG1hcHBpbmdzOiB7XHJcblx0XHRcdGZnOlx0XHQoKHM6IHN0cmluZykgPT4gc3RyaW5nKVtdO1xyXG5cdFx0XHRiZzpcdFx0KChzOiBzdHJpbmcpID0+IHN0cmluZylbXTtcclxuXHRcdFx0c3Q6XHRcdCgoczogc3RyaW5nKSA9PiBzdHJpbmcpW107XHJcblx0XHRcdGN1c3Q6XHQoKHM6IHN0cmluZykgPT4gc3RyaW5nKVtdO1xyXG5cdFx0fSA9IHtcclxuXHRcdFx0Zmc6IFtdLFxyXG5cdFx0XHRiZzogW10sXHJcblx0XHRcdHN0OiBbXSxcclxuXHRcdFx0Y3VzdDogW10sXHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIENodW5rIHVuaXF1ZSBpZFxyXG5cdFx0ICovXHJcblx0XHRfaWQ6IG51bWJlciA9IFJHTE1DaHVuay4jaWRjbnRyKys7XHJcblx0XHRvbnJlbmRlcjogKC4uLmRhdGE6IGFueVtdKSA9PiBzdHJpbmcgPSAoaWR4OiBudW1iZXIsIGM6IHRoaXMsIHBhcjogUkdMTS5SR0xNYXApID0+IHRoaXMucHJpbnQ7XHJcblx0XHRcclxuXHRcdGNvbnN0cnVjdG9yKHB1YmxpYyBjaHI6IHN0cmluZywgcHVibGljIGZnOiBudW1iZXIsIHB1YmxpYyBiZzogbnVtYmVyLCBwdWJsaWMgc3Q6IG51bWJlciwgcHVibGljIGN1c3Q6IG51bWJlcikge1xyXG5cdFx0XHRhc3NlcnQub2sodHlwZW9mIGNociA9PSBcInN0cmluZ1wiLCBcIkJhZCBDaHVua1wiKTtcclxuXHRcdFx0XHJcblx0XHRcdHN1cGVyKCk7XHJcblx0XHRcdFxyXG5cdFx0XHR0aGlzLmNociA9IGNoci5yZXBsYWNlQWxsKCdcXHgwMCcsICcnKTtcclxuXHRcdFx0XHJcblx0XHRcdGFzc2VydC5vayhcclxuXHRcdFx0XHR0aGlzLmNoci5sZW5ndGggPD0gMSAmJlxyXG5cdFx0XHRcdEJ1ZmZlci5mcm9tKHRoaXMuY2hyLCBcImFzY2lpXCIpLmxlbmd0aCA8PSA0ICYmXHJcblx0XHRcdFx0ZmcgPj0gMCAmJiBmZyA8PSAweGZmICYmXHJcblx0XHRcdFx0YmcgPj0gMCAmJiBiZyA8PSAweGZmICYmXHJcblx0XHRcdFx0c3QgPj0gMCAmJiBzdCA8PSAweGZmICYmXHJcblx0XHRcdFx0Y3VzdCA+PSAwICYmIGN1c3QgPD0gMHhmZixcclxuXHRcdFx0XCJCYWQgQ2h1bmtcIik7XHJcblx0XHR9IC8vY3RvclxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIFJlcGFjayBpbnRvIEJ1ZjhcclxuXHRcdCAqL1xyXG5cdFx0Z2V0IHBhY2soKTogQnVmOCB7XHJcblx0XHRcdGNvbnN0IGNocjogQnVmNCA9IEJ1ZmZlci5hbGxvYyg0KSBhcyBCdWY0O1xyXG5cdFx0XHRcclxuXHRcdFx0Y2hyLndyaXRlKHRoaXMuY2hyKTtcclxuXHRcdFx0XHJcblx0XHRcdHJldHVybiBCdWZmZXIuY29uY2F0KFtjaHIsIEJ1ZmZlci5mcm9tKFt0aGlzLmZnLCB0aGlzLmJnLCB0aGlzLnN0LCB0aGlzLmN1c3RdKV0sIDgpIGFzIEJ1Zjg7XHJcblx0XHR9IC8vZy1wYWNrXHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQ3JhZnQgaW52YWxpZC9ibGFuayBlbmRlciBDaHVua1xyXG5cdFx0ICovXHJcblx0XHRzdGF0aWMgYmxhbmsoKTogUkdMTUNodW5rIHtcclxuXHRcdFx0cmV0dXJuIG5ldyBSR0xNQ2h1bmsoJycsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYpO1xyXG5cdFx0fSAvL2JsYW5rXHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQnVmOCAtPiBDaHVua1xyXG5cdFx0ICovXHJcblx0XHRzdGF0aWMgcGFyc2UoYnVmOiBSZWFkb25seTxCdWY4Pik6IFJHTE1DaHVuayB7XHJcblx0XHRcdHJldHVybiBuZXcgUkdMTUNodW5rKGJ1Zi5zbGljZSgwLCA0KS50b1N0cmluZygpLCBidWZbNF0sIGJ1Zls1XSwgYnVmWzZdLCBidWZbN10pO1xyXG5cdFx0fSAvL3BhcnNlXHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQ2h1bmsgc3RyaW5nIHJlcHJlc2VudGF0aW9uXHJcblx0XHQgKi9cclxuXHRcdGdldCBwcmludCgpOiBzdHJpbmcge1xyXG5cdFx0XHRjb25zdCBmZzpcdChzOiBzdHJpbmcsIG4/OiBudW1iZXIsIHQ/OiBSR0xNQ2h1bmspID0+IHN0cmluZyA9IFJHTE1DaHVuay5tYXBwaW5ncy5mZ1t0aGlzLmN1c3QgPT0gMHhmZiA/IDB4ZmYgOiB0aGlzLmZnXVx0XHQ/PyAoKHM6IHN0cmluZyk6IHN0cmluZyA9PiBzKSxcclxuXHRcdFx0XHRiZzpcdFx0KHM6IHN0cmluZywgbj86IG51bWJlciwgdD86IFJHTE1DaHVuaykgPT4gc3RyaW5nID0gUkdMTUNodW5rLm1hcHBpbmdzLmJnW3RoaXMuY3VzdCA9PSAweGZmID8gMHhmZiA6IHRoaXMuYmddXHRcdD8/ICgoczogc3RyaW5nKTogc3RyaW5nID0+IHMpLFxyXG5cdFx0XHRcdHN0Olx0XHQoczogc3RyaW5nLCBuPzogbnVtYmVyLCB0PzogUkdMTUNodW5rKSA9PiBzdHJpbmcgPSBSR0xNQ2h1bmsubWFwcGluZ3Muc3RbdGhpcy5jdXN0ID09IDB4ZmYgPyAweGZmIDogdGhpcy5zdF1cdFx0Pz8gKChzOiBzdHJpbmcpOiBzdHJpbmcgPT4gcyksXHJcblx0XHRcdFx0Y3VzdDpcdChzOiBzdHJpbmcsIG4/OiBudW1iZXIsIHQ/OiBSR0xNQ2h1bmspID0+IHN0cmluZyA9IFJHTE1DaHVuay5tYXBwaW5ncy5jdXN0W3RoaXMuY3VzdF1cdFx0XHRcdFx0XHRcdFx0Pz8gKChzOiBzdHJpbmcpOiBzdHJpbmcgPT4gcyk7XHJcblx0XHRcdFxyXG5cdFx0XHRyZXR1cm4gY3NpbWVyZ2VyKGN1c3Qoc3QoZmcoYmcodGhpcy5jaHIgPz8gJyAnLCB0aGlzLmJnLCB0aGlzKSwgdGhpcy5mZywgdGhpcyksIHRoaXMuc3QsIHRoaXMpLCB0aGlzLmN1c3QsIHRoaXMpKTtcclxuXHRcdH0gLy9nLXByaW50XHJcblx0XHRcclxuXHR9IC8vUkdMTUNodW5rXHJcblxyXG5cdGV4cG9ydCBjbGFzcyBSR0xNYXAgZXh0ZW5kcyBldmVudHMuRXZlbnRFbWl0dGVyIHtcclxuXHRcdHN0YXRpYyBSR0xNQ2h1bms6IHR5cGVvZiBSR0xNQ2h1bmsgPSBSR0xNQ2h1bms7XHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogTWFwIENodW5rc1xyXG5cdFx0ICovXHJcblx0XHRjaHVua3M6IFJHTE1DaHVua1tdID0gWyBdO1xyXG5cdFx0X2xvYWRlZEZyb206IHN0cmluZyA9IFwiXCI7XHJcblx0XHRtZXRhOiB7XHJcblx0XHRcdFtrZXk6IHN0cmluZ106IHN0cmluZztcclxuXHRcdH0gPSB7IH07XHJcblx0XHRcclxuXHRcdGNvbnN0cnVjdG9yKHB1YmxpYyBkaW1lbnM6IFtudW1iZXIsIG51bWJlcl0gPSBbIDAsIDAgXSwgcHVibGljIHBhcmVudDogUmVhZG9ubHk8cmdsLnJnbC5SR0w+LCBwdWJsaWMgc2Nyb2xsOiBbbnVtYmVyLCBudW1iZXJdID0gWyAwLCAwIF0sIHB1YmxpYyBjbGlwOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXSA9IFsgZGltZW5zWzBdLCBkaW1lbnNbMV0sIDAsIDAgXSkge1xyXG5cdFx0XHRhc3NlcnQub2soZGltZW5zIGluc3RhbmNlb2YgQXJyYXkgJiYgZGltZW5zLmxlbmd0aCA9PSAyICYmIGRpbWVucy5ldmVyeShkID0+IGQgPj0gMCkgJiZcclxuXHRcdFx0XHRzY3JvbGwgaW5zdGFuY2VvZiBBcnJheSAmJiBzY3JvbGwubGVuZ3RoID09IDIgJiYgcGFyZW50LCBcIkJhZCBNYXBcIik7XHJcblx0XHRcdFxyXG5cdFx0XHRzdXBlcigpO1xyXG5cdFx0XHRcclxuXHRcdFx0dGhpcy5kaW1lbnMgPSBkaW1lbnMubWFwKGQgPT4gTnVtYmVyKGQpKSBhcyBbbnVtYmVyLCBudW1iZXJdO1xyXG5cdFx0XHR0aGlzLnNjcm9sbCA9IHNjcm9sbC5tYXAoZCA9PiBOdW1iZXIoZCkpIGFzIFtudW1iZXIsIG51bWJlcl07XHJcblx0XHR9IC8vY3RvclxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIENyZWF0ZSBlbXB0eS9ibGFuayBNYXBcclxuXHRcdCAqL1xyXG5cdFx0c3RhdGljIGJsYW5rKHBhcjogUmVhZG9ubHk8cmdsLnJnbC5SR0w+KTogUkdMTWFwIHtcclxuXHRcdFx0cmV0dXJuIG5ldyBSR0xNLlJHTE1hcChbIDAsIDAgXSwgcGFyLCBbIDAsIDAgXSwgWyAwLCAwLCAwLCAwIF0pO1xyXG5cdFx0fSAvL2JsYW5rXHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQ3JhZnQgTWFwIGZyb20gZnNcclxuXHRcdCAqL1xyXG5cdFx0c3RhdGljIGFzeW5jIHBhcnNlKGZyb206IHN0cmluZywgcGFyOiByZ2wucmdsLlJHTCk6IFByb21pc2U8UkdMTWFwPiB7XHJcblx0XHRcdGFzc2VydC5vayhmcm9tLCBcIidmcm9tJyBtdXN0IGJlIHByb3ZpZGVkXCIpO1xyXG5cdFx0XHRcclxuXHRcdFx0ZnJvbSA9IHBhdGgucmVzb2x2ZShmcm9tKTtcclxuXHRcdFx0Y29uc3QgZGF0OiBCdWZmZXIgPSBhd2FpdCBmcy5wcm9taXNlcy5yZWFkRmlsZShmcm9tLCB7XHJcblx0XHRcdFx0ZmxhZzogXCJyXCJcclxuXHRcdFx0fSksXHJcblx0XHRcdGVuZDogQnVmOCA9IEJ1ZmZlci5mcm9tKFwiRkZGRkZGRkZGRkZGRkZGRlwiLCBcImhleFwiKSBhcyBCdWY4O1xyXG5cdFx0XHRcclxuXHRcdFx0YXNzZXJ0Lm9rKGRhdC5sZW5ndGggPj0gOCAmJiAhZGF0LnNsaWNlKDAsIDQpLmNvbXBhcmUoQnVmZmVyLmZyb20oXCJSR0xcXDBcIiwgXCJhc2NpaVwiKSksIFwiQnJva2VuIFJHTE1cIik7XHJcblx0XHRcdFxyXG5cdFx0XHRsZXQgbWFwID0gbmV3IFJHTE1hcChbZGF0LnNsaWNlKDQsIDYpLnJlYWRVSW50MTZMRSgpLCBkYXQuc2xpY2UoNiwgOCkucmVhZFVJbnQxNkxFKCldLCBwYXIpLFxyXG5cdFx0XHRcdGNoazogcmdsLk51bGxhYmxlPEJ1Zjg+ID0gbnVsbCxcclxuXHRcdFx0XHRpOiBudW1iZXIgPSA4LFxyXG5cdFx0XHRcdHBhc3Npbmc6IGJvb2xlYW4gPSB0cnVlO1xyXG5cdFx0XHRcclxuXHRcdFx0bWFwLl9sb2FkZWRGcm9tID0gZnJvbTtcclxuXHRcdFx0XHJcblx0XHRcdGlmIChkYXQubGVuZ3RoID4gOCkge1xyXG5cdFx0XHRcdGRvIHtcclxuXHRcdFx0XHRcdGlmIChpICsgOCA+IGRhdC5sZW5ndGgpIHRocm93IFwiQnJva2VuIFJHTE1cIjtcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0Y2hrID0gZGF0LnNsaWNlKGksIGkgKz0gOCkgYXMgQnVmODtcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0aWYgKGNoay5jb21wYXJlKGVuZCkpIHtcclxuXHRcdFx0XHRcdFx0bWFwLmNodW5rcy5wdXNoKFJHTE1hcC5SR0xNQ2h1bmsucGFyc2UoY2hrKSk7XHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRpZiAoaSA9PSBkYXQubGVuZ3RoKSBicmVhaztcclxuXHRcdFx0XHRcdH0gZWxzZSBwYXNzaW5nID0gZmFsc2U7XHJcblx0XHRcdFx0fSB3aGlsZShwYXNzaW5nKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0aWYgKGNoayAmJiAhY2hrLmNvbXBhcmUoZW5kKSkge1xyXG5cdFx0XHRcdGNvbnN0IG1ldGE6IHN0cmluZ1tdID0gZGF0LnNsaWNlKGkpLnRvU3RyaW5nKFwidXRmOFwiKS5zcGxpdCgnJicpO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGZvciAoY29uc3QgbWV0IG9mIG1ldGEpIHtcclxuXHRcdFx0XHRcdGNvbnN0IHBhaXI6IFtzdHJpbmcsIHN0cmluZ10gfCBbc3RyaW5nXSA9IG1ldC5zcGxpdCgnPScpIGFzIFtzdHJpbmcsIHN0cmluZ10gfCBbc3RyaW5nXTtcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0bWFwLm1ldGFbcGFpclswXV0gPSBwYWlyWzFdID8/ICcnO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0cmV0dXJuIG1hcDtcclxuXHRcdH0gLy9wYXJzZVxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIChSZSlzdG9yZSBNYXAgdG8gZnNcclxuXHRcdCAqL1xyXG5cdFx0YXN5bmMgc3RvcmUodG86IHN0cmluZyA9IHRoaXMuX2xvYWRlZEZyb20pIHtcclxuXHRcdFx0YXNzZXJ0Lm9rKHRvICYmIHR5cGVvZiB0byA9PSBcInN0cmluZ1wiLCBcIidkZXN0aW5hdGlvbicgbXVzdCBiZSBhIHZhbGlkIHBhdGhcIik7XHJcblx0XHRcdFxyXG5cdFx0XHRyZXR1cm4gYXdhaXQgZnMucHJvbWlzZXMud3JpdGVGaWxlKHRvLCB0aGlzLnBhY2ssIHtcclxuXHRcdFx0XHRlbmNvZGluZzogXCJiaW5hcnlcIixcclxuXHRcdFx0XHRmbGFnOiBcIndcIixcclxuXHRcdFx0XHRtb2RlOiAwbzc3NVxyXG5cdFx0XHR9KTtcclxuXHRcdH0gLy9zdG9yZVxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIE1hcCAtPiBCdWZmXHJcblx0XHQgKi9cclxuXHRcdGdldCBwYWNrKCk6IEJ1ZmZlciB7XHJcblx0XHRcdGNvbnN0IGRpbWVuczogW0J1ZjIsIEJ1ZjJdID0gW1xyXG5cdFx0XHRcdEJ1ZmZlci5hbGxvY1Vuc2FmZSgyKSBhcyBCdWYyLFxyXG5cdFx0XHRcdEJ1ZmZlci5hbGxvY1Vuc2FmZSgyKSBhcyBCdWYyLFxyXG5cdFx0XHRdO1xyXG5cdFx0XHRsZXQgbWV0YTogQnVmZmVyID0gQnVmZmVyLmZyb20oT2JqZWN0LmVudHJpZXModGhpcy5tZXRhKS5tYXAoZSA9PiBlLmpvaW4oJz0nKSkuam9pbignJicpLCBcInV0ZjhcIik7XHJcblx0XHRcdFxyXG5cdFx0XHRkaW1lbnNbMF0ud3JpdGVVSW50MTZMRSh0aGlzLmRpbWVuc1swXSk7XHJcblx0XHRcdGRpbWVuc1sxXS53cml0ZVVJbnQxNkxFKHRoaXMuZGltZW5zWzFdKTtcclxuXHRcdFx0XHJcblx0XHRcdGlmIChtZXRhLmxlbmd0aCkgbWV0YSA9IEJ1ZmZlci5jb25jYXQoW0J1ZmZlci5mcm9tKFwiRkZGRkZGRkZGRkZGRkZGRlwiLCBcImhleFwiKSwgbWV0YV0pO1xyXG5cdFx0XHRcclxuXHRcdFx0cmV0dXJuIEJ1ZmZlci5jb25jYXQoW1JHTE0uTUFHSUMsIC4uLmRpbWVucywgLi4udGhpcy5jaHVua3MubWFwKGMgPT4gYy5wYWNrKSwgbWV0YV0sICh0aGlzLmNodW5rcy5sZW5ndGggKyAxKSAqIDggKyBtZXRhLmxlbmd0aCk7XHJcblx0XHR9IC8vZy1wYWNrXHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIE1hcCdzIENodW5rc1xyXG5cdFx0ICovXHJcblx0XHRnZXQgcHJpbnQoKTogc3RyaW5nIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuY2h1bmtzLm1hcChjID0+IGMucHJpbnQpLmpvaW4oJycpO1xyXG5cdFx0fSAvL2ctcHJpbnRcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBHZXQgcmF3IGNodW5rc1xyXG5cdFx0ICovXHJcblx0XHRnZXQgcmF3KCk6IHN0cmluZyB7XHJcblx0XHRcdHJldHVybiB0aGlzLmNodW5rcy5tYXAoKGM6IFJHTE1DaHVuayk6IHN0cmluZyA9PiBjLmNocikuam9pbignJyk7XHJcblx0XHR9IC8vZy1yYXdcclxuXHRcdFxyXG5cdFx0c2Nyb2xsVG8oc3g6IG51bWJlciA9IHRoaXMuc2Nyb2xsWzBdLCBzeTogbnVtYmVyID0gdGhpcy5zY3JvbGxbMV0pOiB0aGlzIHtcclxuXHRcdFx0dGhpcy5zY3JvbGxbMF0gPSBzeDtcclxuXHRcdFx0dGhpcy5zY3JvbGxbMV0gPSBzeTtcclxuXHRcdFx0XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fSAvL3Njcm9sbFRvXHJcblx0XHRzY3JvbGxCeShkc3g6IG51bWJlciA9IDAsIGRzeTogbnVtYmVyID0gMCk6IHRoaXMge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5zY3JvbGxUbyh0aGlzLnNjcm9sbFswXSArIGRzeCwgdGhpcy5zY3JvbGxbMV0gKyBkc3kpO1xyXG5cdFx0fSAvL3Njcm9sbEJ5XHJcblx0XHRyZXNpemVUbyhkeDogbnVtYmVyID0gdGhpcy5kaW1lbnNbMF0sIGR5OiBudW1iZXIgPSB0aGlzLmRpbWVuc1sxXSk6IHRoaXMge1xyXG5cdFx0XHR0aGlzLmRpbWVuc1swXSA9IE1hdGgubWluKGR4LCAwKTtcclxuXHRcdFx0dGhpcy5kaW1lbnNbMV0gPSBNYXRoLm1pbihkeSwgMCk7XHJcblx0XHRcdFxyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH0gLy9yZXNpemVUb1xyXG5cdFx0cmVzaXplQnkoZGR4OiBudW1iZXIgPSAwLCBkZHk6IG51bWJlciA9IDApOiB0aGlzIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMucmVzaXplVG8odGhpcy5kaW1lbnNbMF0gKyBkZHgsIHRoaXMuZGltZW5zWzFdICsgZGR5KTtcclxuXHRcdH0gLy9yZXNpemVCeVxyXG5cdFx0Y2xpcFRvKGN4OiBudW1iZXIgPSB0aGlzLmNsaXBbMF0sIGN5OiBudW1iZXIgPSB0aGlzLmNsaXBbMV0sIGNyeDogbnVtYmVyID0gdGhpcy5jbGlwWzJdLCBjcnk6IG51bWJlciA9IHRoaXMuY2xpcFszXSk6IHRoaXMge1xyXG5cdFx0XHR0aGlzLmNsaXBbMl0gPSBNYXRoLm1heChjcngsIGN4LCAwKTtcclxuXHRcdFx0dGhpcy5jbGlwWzNdID0gTWF0aC5tYXgoY3J5LCBjeSwgMCk7XHJcblx0XHRcdHRoaXMuY2xpcFswXSA9IE1hdGgubWF4KGN4LCB0aGlzLmNsaXBbMl0pO1xyXG5cdFx0XHR0aGlzLmNsaXBbMV0gPSBNYXRoLm1heChjeSwgdGhpcy5jbGlwWzNdKTtcclxuXHRcdFx0XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fSAvL2NsaXBUb1xyXG5cdFx0Y2xpcEJ5KGRjeDogbnVtYmVyID0gMCwgZGN5OiBudW1iZXIgPSAwLCBkY3J4OiBudW1iZXIgPSAwLCBkY3J5OiBudW1iZXIgPSAwKTogdGhpcyB7XHJcblx0XHRcdHJldHVybiB0aGlzLmNsaXBUbyh0aGlzLmNsaXBbMF0gKyBkY3gsIHRoaXMuY2xpcFsxXSArIGRjeSwgdGhpcy5jbGlwWzJdICsgZGNyeCwgdGhpcy5jbGlwWzNdICsgZGNyeSk7XHJcblx0XHR9IC8vY2xpcEJ5XHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQ2FsY3VsYXRlIFZpZXdwb3J0IGNvb3JkaW5hdGVzIGZyb20gY2h1bmtsaXN0IGluZGV4XHJcblx0XHQgKi9cclxuXHRcdGNhbGNDaGtJZHgoeDogbnVtYmVyIHwgUkdMTUNodW5rLCB5OiBudW1iZXIgPSAwKTogbnVtYmVyIHtcclxuXHRcdFx0aWYgKHggaW5zdGFuY2VvZiBSR0xNQ2h1bmspIHJldHVybiB0aGlzLmNodW5rcy5maW5kSW5kZXgoYyA9PiBjID09IHgpO1xyXG5cdFx0XHRcclxuXHRcdFx0YXNzZXJ0Lm9rKHggPj0gMCwgXCJCYWQgaWR4XCIpO1xyXG5cdFx0XHRcclxuXHRcdFx0cmV0dXJuIHRoaXMuZGltZW5zWzBdICogeSEgKyB4O1xyXG5cdFx0fSAvL2NhbGNDaGtJZHhcclxuXHRcdC8qKlxyXG5cdFx0ICogQ2FsY3VsYXRlIGNodW5rbGlzdCBpbmRleCBmcm9tIFZpZXdwb3J0IGNvb3JkaW5hdGVzXHJcblx0XHQgKi9cclxuXHRcdGNhbGNDaGtDcmQoaWR4OiBudW1iZXIgfCBSR0xNQ2h1bmspOiBbbnVtYmVyLCBudW1iZXJdIHtcclxuXHRcdFx0aWYgKGlkeCBpbnN0YW5jZW9mIFJHTE1DaHVuaykgaWR4ID0gdGhpcy5jaHVua3MuZmluZEluZGV4KGMgPT4gYyA9PSBpZHgpO1xyXG5cdFx0XHRcclxuXHRcdFx0YXNzZXJ0Lm9rKGlkeCA+PSAwLCBcIkJhZCBpZHhcIik7XHJcblx0XHRcdFxyXG5cdFx0XHRyZXR1cm4gW1xyXG5cdFx0XHRcdGlkeCAlIHRoaXMuZGltZW5zWzBdLFxyXG5cdFx0XHRcdE1hdGguZmxvb3IoaWR4IC8gdGhpcy5kaW1lbnNbMF0pXHJcblx0XHRcdF07XHJcblx0XHR9IC8vY2FsY0Noa0NyZFxyXG5cdFx0LyoqXHJcblx0XHQgKiBHZXQgYSBDaHVua1xyXG5cdFx0ICovXHJcblx0XHRnZXQobjogbnVtYmVyIHwgUkdMTUNodW5rLCB4PzogbnVtYmVyKTogUkdMTUNodW5rIHtcclxuXHRcdFx0aWYgKG4gaW5zdGFuY2VvZiBSR0xNQ2h1bmspIHJldHVybiB0aGlzLmNodW5rc1t0aGlzLmNhbGNDaGtJZHgobildO1xyXG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgeCA9PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gdGhpcy5jaHVua3Nbbl07XHJcblx0XHRcdGVsc2UgcmV0dXJuIHRoaXMuY2h1bmtzW3RoaXMuY2FsY0Noa0lkeChuLCB4KV07XHJcblx0XHR9IC8vZ2V0XHJcblx0XHQvKipcclxuXHRcdCAqIFBsYWNlIGEgQ2h1bmtcclxuXHRcdCAqL1xyXG5cdFx0cGxhY2UoYzogUmVhZG9ubHk8UkdMTUNodW5rPltdLCBuOiBudW1iZXIgfCBSR0xNQ2h1bmsgPSB0aGlzLmNodW5rcy5sZW5ndGgsIHg/OiBudW1iZXIsIHJlcGw6IG51bWJlciA9IDEpIHtcclxuXHRcdFx0Y29uc3QgaWR4OiBudW1iZXIgPSB0eXBlb2YgeCA9PSBcInVuZGVmaW5lZFwiID8gKG4gaW5zdGFuY2VvZiBSR0xNQ2h1bmsgPyB0aGlzLmNhbGNDaGtJZHgobikgOiBuKSA6IHRoaXMuY2FsY0Noa0lkeChuLCB4KTtcclxuXHRcdFx0XHJcblx0XHRcdGFzc2VydC5vayhpZHggPj0gMCwgXCJCYWQgaWR4XCIpO1xyXG5cdFx0XHRcclxuXHRcdFx0cmV0dXJuIHRoaXMuY2h1bmtzLnNwbGljZShpZHgsIHJlcGwsIC4uLmMpO1xyXG5cdFx0fSAvL3BsYWNlXHJcblx0XHQvKipcclxuXHRcdCAqIFN3YXAgQ2h1bmtzIGxvY2F0aW9uc1xyXG5cdFx0ICovXHJcblx0XHRzd2FwKGMxOiBSZWFkb25seTxSR0xNQ2h1bms+LCBjMjogUmVhZG9ubHk8UkdMTUNodW5rPik6IHRoaXMge1xyXG5cdFx0XHRpZiAoYzEgPT0gYzIpIHJldHVybiB0aGlzO1xyXG5cdFx0XHRcclxuXHRcdFx0Y29uc3QgY2kxOiBudW1iZXIgPSB0aGlzLmNhbGNDaGtJZHgoYzEpO1xyXG5cdFx0XHRhc3NlcnQub2soY2kxID49IDAsIFwiQmFkIGlkeFwiKTtcclxuXHRcdFx0Y29uc3QgY2MxOiBSR0xNQ2h1bmsgPSB0aGlzLmNodW5rcy5zcGxpY2UoY2kxLCAxKVswXTtcclxuXHRcdFx0XHJcblx0XHRcdGNvbnN0IGNpMjogbnVtYmVyID0gdGhpcy5jYWxjQ2hrSWR4KGMyKTtcclxuXHRcdFx0YXNzZXJ0Lm9rKGNpMiA+PSAwLCBcIkJhZCBpZHhcIik7XHJcblx0XHRcdGNvbnN0IGNjMjogUkdMTUNodW5rID0gdGhpcy5jaHVua3Muc3BsaWNlKGNpMiwgMSwgY2MxKVswXTtcclxuXHRcdFx0XHJcblx0XHRcdHRoaXMuY2h1bmtzLnNwbGljZShjaTEsIDAsIGNjMik7XHJcblx0XHRcdFxyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH0gLy9zd2FwXHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQ2hlY2sgaWYgQ2h1bmsgaXMgaW5zaWRlIGJvdW5kc1xyXG5cdFx0ICogXHJcblx0XHQgKiB0KiAtIGNodW5rIHRhcmdldFxyXG5cdFx0ICogZCogLSB2aWV3cG9ydCBzaXplXHJcblx0XHQgKiBzKiAtIHZpZXdwb3J0IHNjcm9sbFxyXG5cdFx0ICogKiAtIHZpZXdwb3J0XHJcblx0XHQgKi9cclxuXHRcdGlzSW4odHg6IG51bWJlciwgdHk/OiBudW1iZXIsIHg6IG51bWJlciA9IHRoaXMuY2xpcFsyXSwgeTogbnVtYmVyID0gdGhpcy5jbGlwWzNdLCBzeDogbnVtYmVyID0gdGhpcy5zY3JvbGxbMF0sIHN5OiBudW1iZXIgPSB0aGlzLnNjcm9sbFsxXSwgZHg6IG51bWJlciA9IHRoaXMuZGltZW5zWzBdLCBkeTogbnVtYmVyID0gdGhpcy5kaW1lbnNbMV0sIGN4OiBudW1iZXIgPSB0aGlzLmNsaXBbMF0sIGN5OiBudW1iZXIgPSB0aGlzLmNsaXBbMV0sIGNyeDogbnVtYmVyID0gdGhpcy5jbGlwWzJdLCBjcnk6IG51bWJlciA9IHRoaXMuY2xpcFszXSk6IGJvb2xlYW4ge1xyXG5cdFx0XHRpZiAodHlwZW9mIHR5ID09IFwidW5kZWZpbmVkXCIpIChbdHgsIHR5XSA9IHRoaXMuY2FsY0Noa0NyZCh0eCkpO1xyXG5cdFx0XHRcclxuXHRcdFx0Y29uc3Qgcng6IG51bWJlciA9IHR4ICsgc3gsXHJcblx0XHRcdFx0cnk6IG51bWJlciA9IHR5ICsgc3k7XHJcblx0XHRcdFxyXG5cdFx0XHRyZXR1cm4gcnggPj0gTWF0aC5tYXgoeCwgY3J4KSAmJiByeCA8IE1hdGgubWluKGN4LCBkeCwgdGhpcy5wYXJlbnQuc291dC5jb2x1bW5zKSAmJiByeSA+PSBNYXRoLm1heCh5LCBjcnkpICYmIHJ5IDwgTWF0aC5taW4oY3ksIGR5LCB0aGlzLnBhcmVudC5zb3V0LnJvd3MpO1xyXG5cdFx0fSAvL2lzSW5cclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBJbXByaW50IE1hcCBvbiBSR0xcclxuXHRcdCAqL1xyXG5cdFx0YXN5bmMgc3RhbXAoZHg6IG51bWJlciA9IHRoaXMuZGltZW5zWzBdLCBkeTogbnVtYmVyID0gdGhpcy5kaW1lbnNbMV0sIHg6IG51bWJlciA9IHRoaXMuY2xpcFsyXSwgeTogbnVtYmVyID0gdGhpcy5jbGlwWzNdLCBzeDogbnVtYmVyID0gdGhpcy5zY3JvbGxbMF0sIHN5OiBudW1iZXIgPSB0aGlzLnNjcm9sbFsxXSwgcGFyOiBSZWFkb25seTxyZ2wucmdsLlJHTD4gPSB0aGlzLnBhcmVudCwgY3g6IG51bWJlciA9IHRoaXMuY2xpcFswXSwgY3k6IG51bWJlciA9IHRoaXMuY2xpcFsxXSk6IFByb21pc2U8dGhpcz4ge1xyXG5cdFx0XHRhc3NlcnQub2socGFyLCBcIkJhZCBwYXJlbnRcIik7XHJcblx0XHRcdFxyXG5cdFx0XHRjb25zdCBzYXY6IFtudW1iZXIsIG51bWJlcl0gPSBbLi4ucGFyLmN1cnNvcl07XHJcblx0XHRcdFxyXG5cdFx0XHRmb3IgKGxldCBpZHg6IG51bWJlciA9IDA7IGlkeCA8IHRoaXMuY2h1bmtzLmxlbmd0aDsgaWR4KyspIHtcclxuXHRcdFx0XHRjb25zdCBjOiBSR0xNLlJHTE1DaHVuayA9IHRoaXMuY2h1bmtzW2lkeF07XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0aWYgKCFjKSBjb250aW51ZTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRpZiAodGhpcy5pc0luKGlkeCwgdW5kZWZpbmVkLCB4LCB5LCBzeCwgc3ksIGR4LCBkeSwgY3gsIGN5KSkge1xyXG5cdFx0XHRcdFx0YXdhaXQgcGFyLm1vdmUoLi4uKHRoaXMuY2FsY0Noa0NyZChpZHgpLm1hcCgoYzogbnVtYmVyLCBpZHg6IG51bWJlcik6IG51bWJlciA9PiBjICsgW3N4LCBzeV1baWR4XSkpIGFzIFtudW1iZXIsIG51bWJlcl0pO1xyXG5cdFx0XHRcdFx0cGFyLndyaXRlKGMub25yZW5kZXIoaWR4LCBjLCB0aGlzKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRhd2FpdCBwYXIubW92ZSguLi5zYXYpO1xyXG5cdFx0XHRcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9IC8vc3RhbXBcclxuXHRcdFxyXG5cdFx0KltTeW1ib2wuaXRlcmF0b3JdKCk6IEdlbmVyYXRvcjxSR0xNQ2h1bmssIHZvaWQsIFJHTE1DaHVuaz4ge1xyXG5cdFx0XHRmb3IgKGNvbnN0IGMgb2YgdGhpcy5jaHVua3MpXHJcblx0XHRcdFx0eWllbGQgYztcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0Z2V0IFtTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlXSgpOiBib29sZWFuIHtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcclxuXHRcdH1cclxuXHRcdHRvU3RyaW5nKCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5wcmludDtcclxuXHRcdH0gLy90b1N0cmluZ1xyXG5cdFx0XHJcblx0fSAvL1JHTE1hcFxyXG5cdFxyXG59IC8vUkdMTVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUkdMTTtcclxuIl19