/// <reference path="./rgl">
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RGLM = exports.csimerger = exports.CSI = void 0;
const tslib_1 = require("tslib");
const assert = tslib_1.__importStar(require("assert"));
const fs = tslib_1.__importStar(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const events = tslib_1.__importStar(require("events"));
exports.CSI = "\x1b[";
/**
 * Merge polluted ANSI
 */
function csimerger(str) {
    let idx = 0, //runner
    csi = 0, //csidx valid at 2
    csidx = [-1, -1]; //first csi
    function proc(str, i1, i2) {
        let s = str.slice(i1, i2);
        if (!s.endsWith('m')) {
            s += 'm';
            i2++;
        }
        s = s.replaceAll(/m\x1b\[/g, ';');
        return [str.slice(0, i1) + s + str.slice(i2), i1 + s.length];
    } //proc
    if (!str)
        return str;
    let cln = str;
    do {
        const c = cln[idx] || '';
        if (!csi && c == '\x1b') {
            csi = 1;
            csidx[0] = idx;
        }
        else if (csi == 1 && c == '[')
            csi = 2;
        else if (csi == 1)
            csi = 0;
        else if (csi == 2 && c == 'm')
            csi = 3;
        else if (csi == 3 && c == '\x1b')
            csi = 4;
        else if (csi == 4 && c == '[')
            csi = 2;
        else if (csi > 1 && !/^([\d;]+)$/.test(c)) {
            csidx[1] = idx - 1;
            if (csi != 2) {
                const [ncln, l] = proc(cln, ...csidx);
                if (cln != ncln)
                    idx = l;
                cln = ncln;
            }
            csi = 0;
            csidx = [-1, -1];
        }
        idx++;
    } while (idx <= cln.length);
    return cln;
} //csimerger
exports.csimerger = csimerger;
var RGLM;
(function (RGLM) {
    function stubmap(text, ...data) {
        return text.split('').map((c) => new RGLMChunk(c, data.shift() ?? 0xff, data.shift() ?? 0xff, data.shift() ?? 0xff, data.shift() ?? 0xff));
    } //stubmap
    RGLM.stubmap = stubmap;
    /**
     * RGLM Magic
     */
    RGLM.MAGIC = Buffer.from("RGL\0", "ascii");
    class RGLMChunk extends events.EventEmitter {
        chr;
        fg;
        bg;
        st;
        cust;
        static #idcntr = 0;
        /**
         * Formatting mappings, set by parent module
         */
        static mappings = {
            fg: [],
            bg: [],
            st: [],
            cust: [],
        };
        /**
         * Chunk unique id
         */
        _id = RGLMChunk.#idcntr++;
        onrender = (idx, c, par) => this.print;
        constructor(chr, fg, bg, st, cust) {
            assert.ok(typeof chr == "string", "Bad Chunk");
            super();
            this.chr = chr;
            this.fg = fg;
            this.bg = bg;
            this.st = st;
            this.cust = cust;
            this.chr = chr.replaceAll('\x00', '');
            assert.ok(this.chr.length <= 1 &&
                Buffer.from(this.chr, "ascii").length <= 4 &&
                fg >= 0 && fg <= 0xff &&
                bg >= 0 && bg <= 0xff &&
                st >= 0 && st <= 0xff &&
                cust >= 0 && cust <= 0xff, "Bad Chunk");
        } //ctor
        /**
         * Repack into Buf8
         */
        get pack() {
            const chr = Buffer.alloc(4);
            chr.write(this.chr);
            return Buffer.concat([chr, Buffer.from([this.fg, this.bg, this.st, this.cust])], 8);
        } //g-pack
        /**
         * Craft invalid/blank ender Chunk
         */
        static blank() {
            return new RGLMChunk('', 0xff, 0xff, 0xff, 0xff);
        } //blank
        /**
         * Buf8 -> Chunk
         */
        static parse(buf) {
            return new RGLMChunk(buf.slice(0, 4).toString(), buf[4], buf[5], buf[6], buf[7]);
        } //parse
        /**
         * Chunk string representation
         */
        get print() {
            const fg = RGLMChunk.mappings.fg[this.cust == 0xff ? 0xff : this.fg] ?? ((s) => s), bg = RGLMChunk.mappings.bg[this.cust == 0xff ? 0xff : this.bg] ?? ((s) => s), st = RGLMChunk.mappings.st[this.cust == 0xff ? 0xff : this.st] ?? ((s) => s), cust = RGLMChunk.mappings.cust[this.cust] ?? ((s) => s);
            return csimerger(cust(st(fg(bg(this.chr ?? ' ', this.bg, this), this.fg, this), this.st, this), this.cust, this));
        } //g-print
    } //RGLMChunk
    RGLM.RGLMChunk = RGLMChunk;
    class RGLMap extends events.EventEmitter {
        dimens;
        parent;
        scroll;
        static RGLMChunk = RGLMChunk;
        /**
         * Map Chunks
         */
        chunks = [];
        _loadedFrom = "";
        meta = {};
        constructor(dimens = [0, 0], parent, scroll = [0, 0]) {
            assert.ok(dimens instanceof Array && dimens.length == 2 && dimens.every(d => d >= 0) &&
                scroll instanceof Array && scroll.length == 2 && parent, "Bad Map");
            super();
            this.dimens = dimens;
            this.parent = parent;
            this.scroll = scroll;
            this.dimens = dimens.map(d => Number(d));
            this.scroll = scroll.map(d => Number(d));
        } //ctor
        /**
         * Create empty/blank Map
         */
        static blank(par) {
            return new RGLM.RGLMap([0, 0], par);
        } //blank
        /**
         * Craft Map from fs
         */
        static async parse(from, par) {
            assert.ok(from, "'from' must be provided");
            from = path.resolve(from);
            const dat = await fs.promises.readFile(from, {
                flag: "r"
            }), end = Buffer.from("FFFFFFFFFFFFFFFF", "hex");
            assert.ok(dat.length >= 8 && !dat.slice(0, 4).compare(Buffer.from("RGL\0", "ascii")), "Broken RGLM");
            let map = new RGLMap([dat.slice(4, 6).readUInt16LE(), dat.slice(6, 8).readUInt16LE()], par), chk = null, i = 8, passing = true;
            map._loadedFrom = from;
            if (dat.length > 8) {
                do {
                    if (i + 8 > dat.length)
                        throw "Broken RGLM";
                    chk = dat.slice(i, i += 8);
                    if (chk.compare(end)) {
                        map.chunks.push(RGLMap.RGLMChunk.parse(chk));
                        if (i == dat.length)
                            break;
                    }
                    else
                        passing = false;
                } while (passing);
            }
            if (chk && !chk.compare(end)) {
                const meta = dat.slice(i).toString("utf8").split('&');
                for (const met of meta) {
                    const pair = met.split('=');
                    map.meta[pair[0]] = pair[1] ?? '';
                }
            }
            return map;
        } //parse
        /**
         * (Re)store Map to fs
         */
        async store(to = this._loadedFrom) {
            assert.ok(to && typeof to == "string", "'destination' must be a valid path");
            return await fs.promises.writeFile(to, this.pack, {
                encoding: "binary",
                flag: "w",
                mode: 0o775
            });
        } //store
        /**
         * Map -> Buff
         */
        get pack() {
            const dimens = [
                Buffer.allocUnsafe(2),
                Buffer.allocUnsafe(2),
            ];
            let meta = Buffer.from(Object.entries(this.meta).map(e => e.join('=')).join('&'), "utf8");
            dimens[0].writeUInt16LE(this.dimens[0]);
            dimens[1].writeUInt16LE(this.dimens[1]);
            if (meta.length)
                meta = Buffer.concat([Buffer.from("FFFFFFFFFFFFFFFF", "hex"), meta]);
            return Buffer.concat([RGLM.MAGIC, ...dimens, ...this.chunks.map(c => c.pack), meta], (this.chunks.length + 1) * 8 + meta.length);
        } //g-pack
        /**
         * String representation of Map's Chunks
         */
        get print() {
            return this.chunks.map(c => c.print).join('');
        } //g-print
        /**
         * Calculate Viewport coordinates from chunklist index
         */
        calcChkIdx(x, y = 0) {
            if (x instanceof RGLMChunk)
                return this.chunks.findIndex(c => c == x);
            assert.ok(x >= 0, "Bad idx");
            return this.dimens[0] * y + x;
        } //calcChkIdx
        /**
         * Calculate chunklist index from Viewport coordinates
         */
        calcChkCrd(idx) {
            if (idx instanceof RGLMChunk)
                idx = this.chunks.findIndex(c => c == idx);
            assert.ok(idx >= 0, "Bad idx");
            return [
                idx % this.dimens[0],
                Math.floor(idx / this.dimens[0])
            ];
        } //calcChkCrd
        /**
         * Get a Chunk
         */
        get(n, x) {
            if (n instanceof RGLMChunk)
                return this.chunks[this.calcChkIdx(n)];
            else if (typeof x == "undefined")
                return this.chunks[n];
            else
                return this.chunks[this.calcChkIdx(n, x)];
        } //get
        /**
         * Place a Chunk
         */
        place(c, n = this.chunks.length, x, repl = 1) {
            const idx = typeof x == "undefined" ? (n instanceof RGLMChunk ? this.calcChkIdx(n) : n) : this.calcChkIdx(n, x);
            assert.ok(idx >= 0, "Bad idx");
            return this.chunks.splice(idx, repl, ...c);
        } //place
        /**
         * Swap Chunks locations
         */
        swap(c1, c2) {
            if (c1 == c2)
                return this;
            const ci1 = this.calcChkIdx(c1);
            assert.ok(ci1 >= 0, "Bad idx");
            const cc1 = this.chunks.splice(ci1, 1)[0];
            const ci2 = this.calcChkIdx(c2);
            assert.ok(ci2 >= 0, "Bad idx");
            const cc2 = this.chunks.splice(ci2, 1, cc1)[0];
            this.chunks.splice(ci1, 0, cc2);
            return this;
        } //swap
        /**
         * Check if Chunk is inside bounds
         *
         * t* - chunk target
         * d* - viewport size
         * s* - viewport scroll
         * * - viewport
         */
        isIn(tx, ty, x = 0, y = 0, sx = this.scroll[0], sy = this.scroll[1], dx = this.dimens[0], dy = this.dimens[1]) {
            if (typeof ty == "undefined")
                ([tx, ty] = this.calcChkCrd(tx));
            const rx = tx + sx, ry = ty + sy;
            return rx >= x && rx < Math.min(dx, this.parent.sout.columns) && ry >= y && ry < Math.min(dy, this.parent.sout.rows);
        } //isIn
        /**
         * Imprint Map on RGL
         */
        async stamp(dx = this.dimens[0], dy = this.dimens[1], x = 0, y = 0, sx = this.scroll[0], sy = this.scroll[1], par = this.parent) {
            assert.ok(par, "Bad parent");
            const sav = [...par.cursor];
            for (let idx = 0; idx < this.chunks.length; idx++) {
                const c = this.chunks[idx];
                if (!c)
                    continue;
                if (this.isIn(idx, undefined, x, y, sx, sy, dx, dy)) {
                    await par.move(...(this.calcChkCrd(idx).map((c, idx) => c + [sx, sy][idx])));
                    par.write(c.onrender(idx, c, this));
                }
            }
            await par.move(...sav);
            return this;
        } //stamp
        *[Symbol.iterator]() {
            for (const c of this.chunks)
                yield c;
        }
        get [Symbol.isConcatSpreadable]() {
            return true;
        }
        get [Symbol.toStringTag]() {
            return this.toString();
        }
        toString() {
            return this.print;
        } //toString
    } //RGLMap
    RGLM.RGLMap = RGLMap;
})(RGLM = exports.RGLM || (exports.RGLM = {})); //RGLM
exports.default = RGLM;
//# sourceMappingURL=data:application/json;base64,