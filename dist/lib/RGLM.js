"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RGLM = void 0;
const tslib_1 = require("tslib");
const assert = tslib_1.__importStar(require("assert"));
const fs = tslib_1.__importStar(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
var RGLM;
(function (RGLM) {
    RGLM.MAGIC = Buffer.from("RGL\0", "ascii");
    class RGLMChunk {
        chr;
        fg;
        bg;
        st;
        cust;
        static #idcntr = 0;
        static mappings;
        _id = RGLMChunk.#idcntr++;
        constructor(chr, fg, bg, st, cust) {
            this.chr = chr;
            this.fg = fg;
            this.bg = bg;
            this.st = st;
            this.cust = cust;
            assert.ok(Buffer.from(chr, "ascii").length <= 4 &&
                fg >= 0 && fg < 0xff &&
                bg >= 0 && bg < 0xff &&
                st >= 0 && st < 0xff &&
                cust >= 0 && cust < 0xff, "Bad Chunk");
        } //ctor
        get pack() {
            return Buffer.concat([Buffer.from(this.chr, "ascii"), Buffer.from([this.fg, this.bg, this.st, this.cust])], 8);
        } //g-pack
        static blank() {
            return new RGLMChunk('', 0xff, 0xff, 0xff, 0xff);
        } //blank
        static parse(buf) {
            return new RGLMChunk(buf.slice(0, 4).toString(), buf[4], buf[5], buf[6], buf[7]);
        } //parse
        print() {
            const fg = RGLMChunk.mappings.fg[this.fg] ?? ((s) => s), bg = RGLMChunk.mappings.bg[this.bg] ?? ((s) => s), st = RGLMChunk.mappings.st[this.st] ?? ((s) => s), cust = RGLMChunk.mappings.cust[this.cust] ?? ((s) => s);
            return cust(st(fg(bg(this.chr))));
        } //print
    } //RGLMChunk
    RGLM.RGLMChunk = RGLMChunk;
    class RGLMap {
        dimens;
        static RGLMChunk = RGLMChunk;
        chunks = [];
        #_loadedFrom = "";
        constructor(dimens = [0, 0]) {
            this.dimens = dimens;
            assert.ok(dimens instanceof Array && dimens.length == 2);
            this.dimens = dimens.map(d => Number(d));
        } //ctor
        static async parse(from) {
            assert.ok(from, "'from' must be provided");
            from = path.resolve(from);
            const dat = await fs.promises.readFile(from, {
                flag: "r"
            }), end = Buffer.from("0000000000000000", "hex");
            assert.ok(dat.length >= 8 && !dat.slice(0, 4).compare(Buffer.from("RGL\0", "ascii")), "Broken RGLM");
            let map = new RGLMap([dat.slice(4, 6).readUInt16LE(), dat.slice(6, 8).readUInt16LE()]), chk, i = 8, passing = true;
            map.#_loadedFrom = from;
            if (dat.length > 8) {
                do {
                    if (i + 8 > dat.length)
                        throw "Broken RGLM";
                    chk = dat.slice(i, i + 8);
                    if (!chk.compare(end)) {
                        map.chunks.push(RGLMap.RGLMChunk.parse(chk));
                    }
                    else
                        passing = false;
                } while (passing);
            }
            return map;
        } //parse
        async store(to = this.#_loadedFrom) {
            assert.ok(to && typeof to == "string", "'destination' must be a valid path");
            return await fs.promises.writeFile(to, this.pack, {
                encoding: "binary",
                flag: "w",
                mode: 0o775
            });
        } //store
        get pack() {
            return Buffer.concat([RGLM.MAGIC, Buffer.from(this.dimens), ...this.chunks.map(c => c.pack)], (this.chunks.length + 1) * 8);
        } //g-pack
    } //RGLMap
    RGLM.RGLMap = RGLMap;
})(RGLM = exports.RGLM || (exports.RGLM = {})); //RGLM
exports.default = RGLM;
//# sourceMappingURL=data:application/json;base64,